"""
 A keystone list
"""
type Todo {
  id: ID!
  label: String
  isComplete: Boolean
  assignedTo: User
  finishBy: String
  createdAt: String
  updatedAt: String
}

input TodoWhereInput {
  AND: [TodoWhereInput!]
  OR: [TodoWhereInput!]
  NOT: [TodoWhereInput!]
  id: IDFilter
  label: StringNullableFilter
  isComplete: BoolNullableFilter
  assignedTo: UserManyRelationFilter
  finishBy: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: NestedIDFilter
}

input NestedIDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: NestedIDFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input DateTimeNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  not: NestedDateTimeNullableFilter
}

input TodoWhereUniqueInput {
  id: ID
}

enum SortTodosBy {
  id_ASC
  id_DESC
  label_ASC
  label_DESC
  isComplete_ASC
  isComplete_DESC
  finishBy_ASC
  finishBy_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input TodoOrderByInput {
  id: OrderDirection
  label: OrderDirection
  isComplete: OrderDirection
  finishBy: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input TodoUpdateInput {
  label: String
  isComplete: Boolean
  assignedTo: UserRelateToOneInput
  finishBy: String
}

input UserRelateToOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  disconnectAll: Boolean
}

input TodosUpdateInput {
  id: ID!
  data: TodoUpdateInput
}

input TodoCreateInput {
  label: String
  isComplete: Boolean
  assignedTo: UserRelateToOneInput
  finishBy: String
}

input TodosCreateInput {
  data: TodoCreateInput
}

"""
 A keystone list
"""
type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  tasks(
    where: TodoWhereInput! = {}
    search: String
    sortBy: [SortTodosBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TodoOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Todo!]
  _tasksMeta(
    where: TodoWhereInput! = {}
    search: String
    sortBy: [SortTodosBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TodoOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use tasksCount instead."
    )
  tasksCount(where: TodoWhereInput! = {}): Int
  createdAt: String
  updatedAt: String
}

type PasswordState {
  isSet: Boolean!
}

type _QueryMeta {
  count: Int
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringNullableFilter
  email: StringNullableFilter
  password: PasswordFilter
  tasks: TodoManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input TodoManyRelationFilter {
  every: TodoWhereInput
  some: TodoWhereInput
  none: TodoWhereInput
}

input UserWhereUniqueInput {
  id: ID
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  tasks: TodoRelateToManyInput
}

input TodoRelateToManyInput {
  create: [TodoCreateInput]
  connect: [TodoWhereUniqueInput]
  disconnect: [TodoWhereUniqueInput]
  disconnectAll: Boolean
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
  tasks: TodoRelateToManyInput
}

input UsersCreateInput {
  data: UserCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  """
   Create a single Todo item.
  """
  createTodo(data: TodoCreateInput): Todo

  """
   Create multiple Todo items.
  """
  createTodos(data: [TodosCreateInput]): [Todo]

  """
   Update a single Todo item by ID.
  """
  updateTodo(id: ID!, data: TodoUpdateInput): Todo

  """
   Update multiple Todo items by ID.
  """
  updateTodos(data: [TodosUpdateInput]): [Todo]

  """
   Delete a single Todo item by ID.
  """
  deleteTodo(id: ID!): Todo

  """
   Delete multiple Todo items by ID.
  """
  deleteTodos(ids: [ID!]): [Todo]

  """
   Create a single User item.
  """
  createUser(data: UserCreateInput): User

  """
   Create multiple User items.
  """
  createUsers(data: [UsersCreateInput]): [User]

  """
   Update a single User item by ID.
  """
  updateUser(id: ID!, data: UserUpdateInput): User

  """
   Update multiple User items by ID.
  """
  updateUsers(data: [UsersUpdateInput]): [User]

  """
   Delete a single User item by ID.
  """
  deleteUser(id: ID!): User

  """
   Delete multiple User items by ID.
  """
  deleteUsers(ids: [ID!]): [User]
}

type Query {
  """
   Search for all Todo items which match the where clause.
  """
  allTodos(
    where: TodoWhereInput! = {}
    search: String
    sortBy: [SortTodosBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TodoOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Todo!]

  """
   Search for the Todo item with the matching ID.
  """
  Todo(where: TodoWhereUniqueInput!): Todo

  """
   Perform a meta-query on all Todo items which match the where clause.
  """
  _allTodosMeta(
    where: TodoWhereInput! = {}
    search: String
    sortBy: [SortTodosBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TodoOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use todosCount instead."
    )
  todosCount(where: TodoWhereInput! = {}): Int

  """
   Search for all User items which match the where clause.
  """
  allUsers(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]

  """
   Search for the User item with the matching ID.
  """
  User(where: UserWhereUniqueInput!): User

  """
   Perform a meta-query on all User items which match the where clause.
  """
  _allUsersMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use usersCount instead."
    )
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
