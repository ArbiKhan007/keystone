type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  cart(
    where: CartItemWhereInput! = {}
    search: String
    sortBy: [SortCartItemsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [CartItemOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [CartItem!]
  _cartMeta(
    where: CartItemWhereInput! = {}
    search: String
    sortBy: [SortCartItemsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [CartItemOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
  cartCount(where: CartItemWhereInput! = {}): Int
  orders(
    where: OrderWhereInput! = {}
    search: String
    sortBy: [SortOrdersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [OrderOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Order!]
  _ordersMeta(
    where: OrderWhereInput! = {}
    search: String
    sortBy: [SortOrdersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [OrderOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
  ordersCount(where: OrderWhereInput! = {}): Int
  role: Role
  products(
    where: ProductWhereInput! = {}
    search: String
    sortBy: [SortProductsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProductOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Product!]
  _productsMeta(
    where: ProductWhereInput! = {}
    search: String
    sortBy: [SortProductsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProductOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
  productsCount(where: ProductWhereInput! = {}): Int
  passwordResetToken: PasswordState
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
}

type PasswordState {
  isSet: Boolean!
}

type _QueryMeta {
  count: Int
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean
  cart_every: CartItemWhereInput
  cart_some: CartItemWhereInput
  cart_none: CartItemWhereInput
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
  role_is_null: Boolean
  role: RoleWhereInput
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetIssuedAt_not: String
  passwordResetIssuedAt_lt: String
  passwordResetIssuedAt_lte: String
  passwordResetIssuedAt_gt: String
  passwordResetIssuedAt_gte: String
  passwordResetIssuedAt_in: [String]
  passwordResetIssuedAt_not_in: [String]
  passwordResetRedeemedAt: String
  passwordResetRedeemedAt_not: String
  passwordResetRedeemedAt_lt: String
  passwordResetRedeemedAt_lte: String
  passwordResetRedeemedAt_gt: String
  passwordResetRedeemedAt_gte: String
  passwordResetRedeemedAt_in: [String]
  passwordResetRedeemedAt_not_in: [String]
}

input UserWhereUniqueInput {
  id: ID!
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  passwordResetIssuedAt_ASC
  passwordResetIssuedAt_DESC
  passwordResetRedeemedAt_ASC
  passwordResetRedeemedAt_DESC
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserCreateInput {
  name: String
  email: String
  password: String
  cart: CartItemRelateToManyInput
  orders: OrderRelateToManyInput
  role: RoleRelateToOneInput
  products: ProductRelateToManyInput
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
}

input CartItemRelateToManyInput {
  create: [CartItemCreateInput]
  connect: [CartItemWhereUniqueInput]
  disconnect: [CartItemWhereUniqueInput]
  disconnectAll: Boolean
}

input OrderRelateToManyInput {
  create: [OrderCreateInput]
  connect: [OrderWhereUniqueInput]
  disconnect: [OrderWhereUniqueInput]
  disconnectAll: Boolean
}

input RoleRelateToOneInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: RoleWhereUniqueInput
  disconnectAll: Boolean
}

input ProductRelateToManyInput {
  create: [ProductCreateInput]
  connect: [ProductWhereUniqueInput]
  disconnect: [ProductWhereUniqueInput]
  disconnectAll: Boolean
}

input UsersCreateInput {
  data: UserCreateInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  cart: CartItemRelateToManyInput
  orders: OrderRelateToManyInput
  role: RoleRelateToOneInput
  products: ProductRelateToManyInput
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

type Product {
  id: ID!
  name: String
  description: String
  photo: ProductImage
  status: String
  price: Int
  user: User
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_in: [String]
  name_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_in: [String]
  description_not_in: [String]
  photo_is_null: Boolean
  photo: ProductImageWhereInput
  status: String
  status_not: String
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_in: [String]
  status_not_in: [String]
  price: Int
  price_not: Int
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  price_in: [Int]
  price_not_in: [Int]
  user_is_null: Boolean
  user: UserWhereInput
}

input ProductWhereUniqueInput {
  id: ID!
}

enum SortProductsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  status_ASC
  status_DESC
  price_ASC
  price_DESC
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  status: OrderDirection
  price: OrderDirection
}

input ProductCreateInput {
  name: String
  description: String
  photo: ProductImageRelateToOneInput
  status: String
  price: Int
  user: UserRelateToOneInput
}

input ProductImageRelateToOneInput {
  create: ProductImageCreateInput
  connect: ProductImageWhereUniqueInput
  disconnect: ProductImageWhereUniqueInput
  disconnectAll: Boolean
}

input UserRelateToOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  disconnectAll: Boolean
}

input ProductsCreateInput {
  data: ProductCreateInput
}

input ProductUpdateInput {
  name: String
  description: String
  photo: ProductImageRelateToOneInput
  status: String
  price: Int
  user: UserRelateToOneInput
}

input ProductsUpdateInput {
  id: ID!
  data: ProductUpdateInput
}

type ProductImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  product: Product
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference)
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
  Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input ProductImageWhereInput {
  AND: [ProductImageWhereInput!]
  OR: [ProductImageWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  altText: String
  altText_not: String
  altText_contains: String
  altText_not_contains: String
  altText_in: [String]
  altText_not_in: [String]
  product_is_null: Boolean
  product: ProductWhereInput
}

input ProductImageWhereUniqueInput {
  id: ID!
}

enum SortProductImagesBy {
  id_ASC
  id_DESC
  altText_ASC
  altText_DESC
}

input ProductImageOrderByInput {
  id: OrderDirection
  altText: OrderDirection
}

input ProductImageCreateInput {
  image: Upload
  altText: String
  product: ProductRelateToOneInput
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ProductRelateToOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: ProductWhereUniqueInput
  disconnectAll: Boolean
}

input ProductImagesCreateInput {
  data: ProductImageCreateInput
}

input ProductImageUpdateInput {
  image: Upload
  altText: String
  product: ProductRelateToOneInput
}

input ProductImagesUpdateInput {
  id: ID!
  data: ProductImageUpdateInput
}

type CartItem {
  id: ID!
  quantity: Int
  product: Product
  user: User
}

input CartItemWhereInput {
  AND: [CartItemWhereInput!]
  OR: [CartItemWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  quantity: Int
  quantity_not: Int
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  quantity_in: [Int]
  quantity_not_in: [Int]
  product_is_null: Boolean
  product: ProductWhereInput
  user_is_null: Boolean
  user: UserWhereInput
}

input CartItemWhereUniqueInput {
  id: ID!
}

enum SortCartItemsBy {
  id_ASC
  id_DESC
  quantity_ASC
  quantity_DESC
}

input CartItemOrderByInput {
  id: OrderDirection
  quantity: OrderDirection
}

input CartItemCreateInput {
  quantity: Int
  product: ProductRelateToOneInput
  user: UserRelateToOneInput
}

input CartItemsCreateInput {
  data: CartItemCreateInput
}

input CartItemUpdateInput {
  quantity: Int
  product: ProductRelateToOneInput
  user: UserRelateToOneInput
}

input CartItemsUpdateInput {
  id: ID!
  data: CartItemUpdateInput
}

type OrderItem {
  id: ID!
  name: String
  description: String
  photo: ProductImage
  price: Int
  quantity: Int
  order: Order
}

input OrderItemWhereInput {
  AND: [OrderItemWhereInput!]
  OR: [OrderItemWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_in: [String]
  name_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_in: [String]
  description_not_in: [String]
  photo_is_null: Boolean
  photo: ProductImageWhereInput
  price: Int
  price_not: Int
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  price_in: [Int]
  price_not_in: [Int]
  quantity: Int
  quantity_not: Int
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  quantity_in: [Int]
  quantity_not_in: [Int]
  order_is_null: Boolean
  order: OrderWhereInput
}

input OrderItemWhereUniqueInput {
  id: ID!
}

enum SortOrderItemsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  price_ASC
  price_DESC
  quantity_ASC
  quantity_DESC
}

input OrderItemOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  price: OrderDirection
  quantity: OrderDirection
}

input OrderItemCreateInput {
  name: String
  description: String
  photo: ProductImageRelateToOneInput
  price: Int
  quantity: Int
  order: OrderRelateToOneInput
}

input OrderRelateToOneInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
  disconnect: OrderWhereUniqueInput
  disconnectAll: Boolean
}

input OrderItemsCreateInput {
  data: OrderItemCreateInput
}

input OrderItemUpdateInput {
  name: String
  description: String
  photo: ProductImageRelateToOneInput
  price: Int
  quantity: Int
  order: OrderRelateToOneInput
}

input OrderItemsUpdateInput {
  id: ID!
  data: OrderItemUpdateInput
}

type Order {
  id: ID!
  label: String
  total: Int
  items(
    where: OrderItemWhereInput! = {}
    search: String
    sortBy: [SortOrderItemsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [OrderItemOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [OrderItem!]
  _itemsMeta(
    where: OrderItemWhereInput! = {}
    search: String
    sortBy: [SortOrderItemsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [OrderItemOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
  itemsCount(where: OrderItemWhereInput! = {}): Int
  user: User
  charge: String
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  total: Int
  total_not: Int
  total_lt: Int
  total_lte: Int
  total_gt: Int
  total_gte: Int
  total_in: [Int]
  total_not_in: [Int]
  items_every: OrderItemWhereInput
  items_some: OrderItemWhereInput
  items_none: OrderItemWhereInput
  user_is_null: Boolean
  user: UserWhereInput
  charge: String
  charge_not: String
  charge_contains: String
  charge_not_contains: String
  charge_in: [String]
  charge_not_in: [String]
}

input OrderWhereUniqueInput {
  id: ID!
}

enum SortOrdersBy {
  id_ASC
  id_DESC
  total_ASC
  total_DESC
  charge_ASC
  charge_DESC
}

input OrderOrderByInput {
  id: OrderDirection
  total: OrderDirection
  charge: OrderDirection
}

input OrderCreateInput {
  total: Int
  items: OrderItemRelateToManyInput
  user: UserRelateToOneInput
  charge: String
}

input OrderItemRelateToManyInput {
  create: [OrderItemCreateInput]
  connect: [OrderItemWhereUniqueInput]
  disconnect: [OrderItemWhereUniqueInput]
  disconnectAll: Boolean
}

input OrdersCreateInput {
  data: OrderCreateInput
}

input OrderUpdateInput {
  total: Int
  items: OrderItemRelateToManyInput
  user: UserRelateToOneInput
  charge: String
}

input OrdersUpdateInput {
  id: ID!
  data: OrderUpdateInput
}

type Role {
  id: ID!
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  assignedTo(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]
  _assignedToMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
  assignedToCount(where: UserWhereInput! = {}): Int
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_in: [String]
  name_not_in: [String]
  canManageProducts: Boolean
  canManageProducts_not: Boolean
  canSeeOtherUsers: Boolean
  canSeeOtherUsers_not: Boolean
  canManageUsers: Boolean
  canManageUsers_not: Boolean
  canManageRoles: Boolean
  canManageRoles_not: Boolean
  canManageCart: Boolean
  canManageCart_not: Boolean
  canManageOrders: Boolean
  canManageOrders_not: Boolean
  assignedTo_every: UserWhereInput
  assignedTo_some: UserWhereInput
  assignedTo_none: UserWhereInput
}

input RoleWhereUniqueInput {
  id: ID!
}

enum SortRolesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  canManageProducts_ASC
  canManageProducts_DESC
  canSeeOtherUsers_ASC
  canSeeOtherUsers_DESC
  canManageUsers_ASC
  canManageUsers_DESC
  canManageRoles_ASC
  canManageRoles_DESC
  canManageCart_ASC
  canManageCart_DESC
  canManageOrders_ASC
  canManageOrders_DESC
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canManageProducts: OrderDirection
  canSeeOtherUsers: OrderDirection
  canManageUsers: OrderDirection
  canManageRoles: OrderDirection
  canManageCart: OrderDirection
  canManageOrders: OrderDirection
}

input RoleCreateInput {
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  assignedTo: UserRelateToManyInput
}

input UserRelateToManyInput {
  create: [UserCreateInput]
  connect: [UserWhereUniqueInput]
  disconnect: [UserWhereUniqueInput]
  disconnectAll: Boolean
}

input RolesCreateInput {
  data: RoleCreateInput
}

input RoleUpdateInput {
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  assignedTo: UserRelateToManyInput
}

input RolesUpdateInput {
  id: ID!
  data: RoleUpdateInput
}

type Mutation {
  createUser(data: UserCreateInput): User
  createUsers(data: [UsersCreateInput]): [User]
  updateUser(id: ID!, data: UserUpdateInput): User
  updateUsers(data: [UsersUpdateInput]): [User]
  deleteUser(id: ID!): User
  deleteUsers(ids: [ID!]): [User]
  createProduct(data: ProductCreateInput): Product
  createProducts(data: [ProductsCreateInput]): [Product]
  updateProduct(id: ID!, data: ProductUpdateInput): Product
  updateProducts(data: [ProductsUpdateInput]): [Product]
  deleteProduct(id: ID!): Product
  deleteProducts(ids: [ID!]): [Product]
  createProductImage(data: ProductImageCreateInput): ProductImage
  createProductImages(data: [ProductImagesCreateInput]): [ProductImage]
  updateProductImage(id: ID!, data: ProductImageUpdateInput): ProductImage
  updateProductImages(data: [ProductImagesUpdateInput]): [ProductImage]
  deleteProductImage(id: ID!): ProductImage
  deleteProductImages(ids: [ID!]): [ProductImage]
  createCartItem(data: CartItemCreateInput): CartItem
  createCartItems(data: [CartItemsCreateInput]): [CartItem]
  updateCartItem(id: ID!, data: CartItemUpdateInput): CartItem
  updateCartItems(data: [CartItemsUpdateInput]): [CartItem]
  deleteCartItem(id: ID!): CartItem
  deleteCartItems(ids: [ID!]): [CartItem]
  createOrderItem(data: OrderItemCreateInput): OrderItem
  createOrderItems(data: [OrderItemsCreateInput]): [OrderItem]
  updateOrderItem(id: ID!, data: OrderItemUpdateInput): OrderItem
  updateOrderItems(data: [OrderItemsUpdateInput]): [OrderItem]
  deleteOrderItem(id: ID!): OrderItem
  deleteOrderItems(ids: [ID!]): [OrderItem]
  createOrder(data: OrderCreateInput): Order
  createOrders(data: [OrdersCreateInput]): [Order]
  updateOrder(id: ID!, data: OrderUpdateInput): Order
  updateOrders(data: [OrdersUpdateInput]): [Order]
  deleteOrder(id: ID!): Order
  deleteOrders(ids: [ID!]): [Order]
  createRole(data: RoleCreateInput): Role
  createRoles(data: [RolesCreateInput]): [Role]
  updateRole(id: ID!, data: RoleUpdateInput): Role
  updateRoles(data: [RolesUpdateInput]): [Role]
  deleteRole(id: ID!): Role
  deleteRoles(ids: [ID!]): [Role]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): SendUserPasswordResetLinkResult
  redeemUserPasswordResetToken(
    email: String!
    token: String!
    password: String!
  ): RedeemUserPasswordResetTokenResult
  addToCart(productId: ID): CartItem
  checkout(token: String!): Order
}

type Query {
  User(where: UserWhereUniqueInput!): User
  allUsers(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]
  _allUsersMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use usersCount instead."
    )
  usersCount(where: UserWhereInput! = {}): Int
  Product(where: ProductWhereUniqueInput!): Product
  allProducts(
    where: ProductWhereInput! = {}
    search: String
    sortBy: [SortProductsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProductOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Product!]
  _allProductsMeta(
    where: ProductWhereInput! = {}
    search: String
    sortBy: [SortProductsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProductOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use productsCount instead."
    )
  productsCount(where: ProductWhereInput! = {}): Int
  ProductImage(where: ProductImageWhereUniqueInput!): ProductImage
  allProductImages(
    where: ProductImageWhereInput! = {}
    search: String
    sortBy: [SortProductImagesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProductImageOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [ProductImage!]
  _allProductImagesMeta(
    where: ProductImageWhereInput! = {}
    search: String
    sortBy: [SortProductImagesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProductImageOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use productImagesCount instead."
    )
  productImagesCount(where: ProductImageWhereInput! = {}): Int
  CartItem(where: CartItemWhereUniqueInput!): CartItem
  allCartItems(
    where: CartItemWhereInput! = {}
    search: String
    sortBy: [SortCartItemsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [CartItemOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [CartItem!]
  _allCartItemsMeta(
    where: CartItemWhereInput! = {}
    search: String
    sortBy: [SortCartItemsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [CartItemOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use cartItemsCount instead."
    )
  cartItemsCount(where: CartItemWhereInput! = {}): Int
  OrderItem(where: OrderItemWhereUniqueInput!): OrderItem
  allOrderItems(
    where: OrderItemWhereInput! = {}
    search: String
    sortBy: [SortOrderItemsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [OrderItemOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [OrderItem!]
  _allOrderItemsMeta(
    where: OrderItemWhereInput! = {}
    search: String
    sortBy: [SortOrderItemsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [OrderItemOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use orderItemsCount instead."
    )
  orderItemsCount(where: OrderItemWhereInput! = {}): Int
  Order(where: OrderWhereUniqueInput!): Order
  allOrders(
    where: OrderWhereInput! = {}
    search: String
    sortBy: [SortOrdersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [OrderOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Order!]
  _allOrdersMeta(
    where: OrderWhereInput! = {}
    search: String
    sortBy: [SortOrdersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [OrderOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use ordersCount instead."
    )
  ordersCount(where: OrderWhereInput! = {}): Int
  Role(where: RoleWhereUniqueInput!): Role
  allRoles(
    where: RoleWhereInput! = {}
    search: String
    sortBy: [SortRolesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RoleOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Role!]
  _allRolesMeta(
    where: RoleWhereInput! = {}
    search: String
    sortBy: [SortRolesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RoleOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use rolesCount instead."
    )
  rolesCount(where: RoleWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(
    email: String!
    token: String!
  ): ValidateUserPasswordResetTokenResult
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type SendUserPasswordResetLinkResult {
  code: PasswordResetRequestErrorCode!
  message: String!
}

enum PasswordResetRequestErrorCode {
  IDENTITY_NOT_FOUND
  MULTIPLE_IDENTITY_MATCHES
}

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  MULTIPLE_IDENTITY_MATCHES
  TOKEN_NOT_SET
  TOKEN_MISMATCH
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}
