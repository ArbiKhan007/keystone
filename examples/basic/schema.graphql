type User {
  id: ID
  name: String
  email: String
  avatar: LocalImageFieldOutput
  attachment: LocalFileFieldOutput
  password: PasswordState!
  isAdmin: Boolean
  roles: String
  phoneNumbers(
    where: PhoneNumberWhereInput! = {}
    orderBy: [SortPhoneNumbersBy!]! = []
    first: Int
    skip: Int! = 0
  ): [PhoneNumber!]!
  _phoneNumbersMeta(
    where: PhoneNumberWhereInput! = {}
    orderBy: [SortPhoneNumbersBy!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
  posts(
    where: PostWhereInput! = {}
    orderBy: [SortPostsBy!]! = []
    first: Int
    skip: Int! = 0
  ): [Post!]!
  _postsMeta(
    where: PostWhereInput! = {}
    orderBy: [SortPostsBy!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
  randomNumber: Float!
}

type LocalImageFieldOutput {
  id: ID!
  filesize: Int!
  height: Int!
  width: Int!
  extension: ImageExtension!
  ref: String!
  src: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type LocalFileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  src: String!
}

type PasswordState {
  isSet: Boolean!
}

type PhoneNumber {
  id: ID
  label: String
  user: User
  type: String
  value: String
}

input PhoneNumberWhereInput {
  AND: [PhoneNumberWhereInput!]
  OR: [PhoneNumberWhereInput!]
  NOT: [PhoneNumberWhereInput!]
  id: IntFilter
  user: UserWhereInput
  type: StringNullableFilter
  value: StringNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IntFilter
  name: StringNullableFilter
  email: StringNullableFilter
  password: PasswordFieldFilter
  isAdmin: BoolNullableFilter
  roles: StringNullableFilter
  phoneNumbers: PhoneNumbersRelationFilter
  posts: PostsRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input PasswordFieldFilter {
  isSet: Boolean!
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input PhoneNumbersRelationFilter {
  every: PhoneNumberWhereInput
  some: PhoneNumberWhereInput
  none: PhoneNumberWhereInput
}

input PostsRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IntFilter
  title: StringNullableFilter
  status: StringNullableFilter
  author: UserWhereInput
}

input SortPhoneNumbersBy {
  id: OrderDirection
  type: OrderDirection
  value: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

type _QueryMeta {
  count: Int
}

type Post {
  id: ID
  title: String
  status: String
  content: Post_content_DocumentField
  author: User
}

type Post_content_DocumentField {
  document(hydrateRelationships: Boolean! = false): JSON!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

input SortPostsBy {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input SortUsersBy {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  roles: OrderDirection
}

input PhoneNumberWhereUniqueInput {
  id: ID
}

input PostWhereUniqueInput {
  id: ID
}

type Mutation {
  createUser(
    data: UserCreateInput! = {
      phoneNumbers: { create: [], connect: [] }
      posts: { create: [], connect: [] }
    }
  ): User!
  createUsers(data: [UsersCreateInput!]! = []): [User!]!
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UsersUpdateInput!]!): [User!]!
  deleteUser(id: ID!): User
  deleteUsers(ids: [ID!]!): [User!]!
  createPhoneNumber(data: PhoneNumberCreateInput! = {}): PhoneNumber!
  createPhoneNumbers(data: [PhoneNumbersCreateInput!]! = []): [PhoneNumber!]!
  updatePhoneNumber(
    where: PhoneNumberWhereUniqueInput!
    data: PhoneNumberUpdateInput!
  ): PhoneNumber
  updatePhoneNumbers(data: [PhoneNumbersUpdateInput!]!): [PhoneNumber!]!
  deletePhoneNumber(id: ID!): PhoneNumber
  deletePhoneNumbers(ids: [ID!]!): [PhoneNumber!]!
  createPost(data: PostCreateInput! = {}): Post!
  createPosts(data: [PostsCreateInput!]! = []): [Post!]!
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostsUpdateInput!]!): [Post!]!
  deletePost(id: ID!): Post
  deletePosts(ids: [ID!]!): [Post!]!
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

input UserCreateInput {
  name: String
  email: String
  avatar: ImageFieldInput
  attachment: FileFieldInput
  password: String
  isAdmin: Boolean
  roles: String
  phoneNumbers: PhoneNumberRelateToManyForCreateInput! = {
    create: []
    connect: []
  }
  posts: PostRelateToManyForCreateInput! = { create: [], connect: [] }
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input FileFieldInput {
  upload: Upload
  ref: String
}

input PhoneNumberRelateToManyForCreateInput {
  create: [PhoneNumberCreateInput!]! = []
  connect: [PhoneNumberWhereUniqueInput!]! = []
}

input PhoneNumberCreateInput {
  user: UserRelateToManyForCreateInput
  type: String
  value: String
}

input UserRelateToManyForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]! = []
  connect: [PostWhereUniqueInput!]! = []
}

input PostCreateInput {
  title: String
  status: String
  content: JSON
  author: UserRelateToManyForCreateInput
}

input UsersCreateInput {
  data: UserCreateInput!
}

input UserUpdateInput {
  name: String
  email: String
  avatar: ImageFieldInput
  attachment: FileFieldInput
  password: String
  isAdmin: Boolean
  roles: String
  phoneNumbers: PhoneNumberRelateToManyForUpdateInput! = {
    create: []
    connect: []
    disconnect: []
    disconnectAll: false
  }
  posts: PostRelateToManyForUpdateInput! = {
    create: []
    connect: []
    disconnect: []
    disconnectAll: false
  }
}

input PhoneNumberRelateToManyForUpdateInput {
  create: [PhoneNumberCreateInput!]! = []
  connect: [PhoneNumberWhereUniqueInput!]! = []
  disconnect: [PhoneNumberWhereUniqueInput!]! = []
  disconnectAll: Boolean! = false
}

input PostRelateToManyForUpdateInput {
  create: [PostCreateInput!]! = []
  connect: [PostWhereUniqueInput!]! = []
  disconnect: [PostWhereUniqueInput!]! = []
  disconnectAll: Boolean! = false
}

input UsersUpdateInput {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input PhoneNumbersCreateInput {
  data: PhoneNumberCreateInput!
}

input PhoneNumberUpdateInput {
  user: UserRelateToManyForUpdateInput
  type: String
  value: String
}

input UserRelateToManyForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input PhoneNumbersUpdateInput {
  where: PhoneNumberWhereUniqueInput!
  data: PhoneNumberUpdateInput!
}

input PostsCreateInput {
  data: PostCreateInput!
}

input PostUpdateInput {
  title: String
  status: String
  content: JSON
  author: UserRelateToManyForUpdateInput
}

input PostsUpdateInput {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

type Query {
  User(where: UserWhereUniqueInput!): User
  allUsers(
    where: UserWhereInput! = {}
    orderBy: [SortUsersBy!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]!
  _allUsersMeta(
    where: UserWhereInput! = {}
    orderBy: [SortUsersBy!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
  PhoneNumber(where: PhoneNumberWhereUniqueInput!): PhoneNumber
  allPhoneNumbers(
    where: PhoneNumberWhereInput! = {}
    orderBy: [SortPhoneNumbersBy!]! = []
    first: Int
    skip: Int! = 0
  ): [PhoneNumber!]!
  _allPhoneNumbersMeta(
    where: PhoneNumberWhereInput! = {}
    orderBy: [SortPhoneNumbersBy!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
  Post(where: PostWhereUniqueInput!): Post
  allPosts(
    where: PostWhereInput! = {}
    orderBy: [SortPostsBy!]! = []
    first: Int
    skip: Int! = 0
  ): [Post!]!
  _allPostsMeta(
    where: PostWhereInput! = {}
    orderBy: [SortPostsBy!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}
