type Task {
  id: ID
  label: String
  priority: TaskPriorityType
  isComplete: Boolean
  assignedTo: Person
  finishBy: String
}

enum TaskPriorityType {
  low
  medium
  high
}

type Person {
  id: ID
  name: String
  tasks(
    where: TaskWhereInput! = {}
    orderBy: [SortTasksBy!]! = []
    first: Int
    skip: Int! = 0
  ): [Task!]!
  _tasksMeta(
    where: TaskWhereInput! = {}
    orderBy: [SortTasksBy!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
}

input SortTasksBy {
  id: OrderDirection
  label: OrderDirection
  priority: OrderDirection
  isComplete: OrderDirection
  finishBy: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

type _QueryMeta {
  count: Int
}

input TaskWhereUniqueInput {
  id: ID
}

input PersonWhereUniqueInput {
  id: ID
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
}

input SortPeopleBy {
  id: OrderDirection
  name: OrderDirection
}

type Mutation {
  createTask(data: TaskCreateInput! = {}): Task!
  createTasks(data: [TasksCreateInput!]! = []): [Task!]!
  updateTask(where: TaskWhereUniqueInput!, data: TaskUpdateInput!): Task
  updateTasks(data: [TasksUpdateInput!]!): Task
  deleteTask(id: ID!): Task
  deleteTasks(ids: [ID!]!): [Task!]!
  createPerson(data: PersonCreateInput! = {}): Person!
  createPeople(data: [PeopleCreateInput!]! = []): [Person!]!
  updatePerson(where: PersonWhereUniqueInput!, data: PersonUpdateInput!): Person
  updatePeople(data: [PeopleUpdateInput!]!): Person
  deletePerson(id: ID!): Person
  deletePeople(ids: [ID!]!): [Person!]!
}

input TaskCreateInput {
  label: String
  priority: TaskPriorityType
  isComplete: Boolean
  finishBy: String
}

input TasksCreateInput {
  data: TaskCreateInput!
}

input TaskUpdateInput {
  label: String
  priority: TaskPriorityType
  isComplete: Boolean
  finishBy: String
}

input TasksUpdateInput {
  where: TaskWhereUniqueInput!
  data: TaskUpdateInput!
}

input PersonCreateInput {
  name: String
}

input PeopleCreateInput {
  data: PersonCreateInput!
}

input PersonUpdateInput {
  name: String
}

input PeopleUpdateInput {
  where: PersonWhereUniqueInput!
  data: PersonUpdateInput!
}

type Query {
  Task(where: TaskWhereUniqueInput!): Task
  allTasks(
    where: TaskWhereInput! = {}
    orderBy: [SortTasksBy!]! = []
    first: Int
    skip: Int! = 0
  ): [Task!]!
  _allTasksMeta(
    where: TaskWhereInput! = {}
    orderBy: [SortTasksBy!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
  Person(where: PersonWhereUniqueInput!): Person
  allPeople(
    where: PersonWhereInput! = {}
    orderBy: [SortPeopleBy!]! = []
    first: Int
    skip: Int! = 0
  ): [Person!]!
  _allPeopleMeta(
    where: PersonWhereInput! = {}
    orderBy: [SortPeopleBy!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
