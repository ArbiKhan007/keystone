datasource sqlite {
  url      = env("DATABASE_URL")
  provider = "sqlite"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                      Int        @id @default(autoincrement())
  name                    String?
  email                   String?
  password                String?
  cart                    CartItem[] @relation("CartItem_user")
  orders                  Order[]    @relation("Order_user")
  role                    Role?      @relation("User_role", fields: [roleId], references: [id])
  roleId                  Int?       @map("role")
  products                Product[]  @relation("Product_user")
  passwordResetToken      String?
  passwordResetIssuedAt   DateTime?
  passwordResetRedeemedAt DateTime?

  @@index([roleId])
}

model Product {
  user                  User?         @relation("Product_user", fields: [userId], references: [id])
  userId                Int?          @map("user")
  id                    Int           @id @default(autoincrement())
  name                  String?
  description           String?
  photo                 ProductImage? @relation("Product_photo", fields: [photoId], references: [id])
  photoId               Int?          @unique @map("photo")
  status                String?
  price                 Int?
  from_CartItem_product CartItem[]    @relation("CartItem_product")

  @@index([userId])
}

model ProductImage {
  product              Product?    @relation("Product_photo")
  id                   Int         @id @default(autoincrement())
  image                String?
  altText              String?
  from_OrderItem_photo OrderItem[] @relation("OrderItem_photo")
}

model CartItem {
  user      User?    @relation("CartItem_user", fields: [userId], references: [id])
  userId    Int?     @map("user")
  id        Int      @id @default(autoincrement())
  quantity  Int?
  product   Product? @relation("CartItem_product", fields: [productId], references: [id])
  productId Int?     @map("product")

  @@index([userId])
  @@index([productId])
}

model OrderItem {
  id          Int           @id @default(autoincrement())
  name        String?
  description String?
  photo       ProductImage? @relation("OrderItem_photo", fields: [photoId], references: [id])
  photoId     Int?          @map("photo")
  price       Int?
  quantity    Int?
  order       Order?        @relation("OrderItem_order", fields: [orderId], references: [id])
  orderId     Int?          @map("order")

  @@index([photoId])
  @@index([orderId])
}

model Order {
  user   User?       @relation("Order_user", fields: [userId], references: [id])
  userId Int?        @map("user")
  items  OrderItem[] @relation("OrderItem_order")
  id     Int         @id @default(autoincrement())
  total  Int?
  charge String?

  @@index([userId])
}

model Role {
  assignedTo        User[]   @relation("User_role")
  id                Int      @id @default(autoincrement())
  name              String?
  canManageProducts Boolean?
  canSeeOtherUsers  Boolean?
  canManageUsers    Boolean?
  canManageRoles    Boolean?
  canManageCart     Boolean?
  canManageOrders   Boolean?
}