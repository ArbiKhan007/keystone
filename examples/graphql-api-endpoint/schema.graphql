type User {
  id: ID!
  name: String
  email: String
  password: PasswordState!
  posts(
    where: PostWhereInput! = {}
    orderBy: [SortPostsBy!]! = []
    first: Int
    skip: Int! = 0
  ): [Post!]!
<<<<<<< HEAD
  postsCount(where: PostWhereInput! = {}): Int!
=======
  _postsMeta(
    where: PostWhereInput
    search: String
    sortBy: [SortPostsBy!]
    orderBy: String
    first: Int
    skip: Int! = 0
  ): _QueryMeta
}

input UserWhereInput {
  AND: [UserWhereInput]
  OR: [UserWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean

  """
   condition must be true for all nodes
  """
  posts_every: PostWhereInput

  """
   condition must be true for at least 1 node
  """
  posts_some: PostWhereInput

  """
   condition must be false for all nodes
  """
  posts_none: PostWhereInput
}

input UserWhereUniqueInput {
  id: ID!
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyInput
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyInput
>>>>>>> master
}

type PasswordState {
  isSet: Boolean!
}

type Post {
  id: ID!
  title: String
  status: String
  content: Post_content_DocumentField
  publishDate: String
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [SortTagsBy!]! = []
    first: Int
    skip: Int! = 0
  ): [Tag!]!
<<<<<<< HEAD
  tagsCount(where: TagWhereInput! = {}): Int!
=======
  _tagsMeta(
    where: TagWhereInput
    search: String
    sortBy: [SortTagsBy!]
    orderBy: String
    first: Int
    skip: Int! = 0
  ): _QueryMeta
>>>>>>> master
}

type Post_content_DocumentField {
  document(hydrateRelationships: Boolean! = false): JSON!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Tag {
  id: ID!
  name: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [SortPostsBy!]! = []
    first: Int
    skip: Int! = 0
  ): [Post!]!
  postsCount(where: PostWhereInput! = {}): Int!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: StringFilter
  title: StringNullableFilter
  status: StringNullableFilter
  publishDate: DateTimeNullableFilter
  author: UserWhereInput
  tags: TagsRelationFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  not: NestedDateTimeNullableFilter
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  name: StringNullableFilter
  email: StringNullableFilter
  password: PasswordFieldFilter
  posts: PostsRelationFilter
}

input PasswordFieldFilter {
  isSet: Boolean!
}

input PostsRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

<<<<<<< HEAD
input TagsRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
=======
"""
 A keystone list
"""
type Tag {
  id: ID!
  name: String
  posts(
    where: PostWhereInput
    search: String
    sortBy: [SortPostsBy!]
    orderBy: String
    first: Int
    skip: Int! = 0
  ): [Post!]!
  _postsMeta(
    where: PostWhereInput
    search: String
    sortBy: [SortPostsBy!]
    orderBy: String
    first: Int
    skip: Int! = 0
  ): _QueryMeta
>>>>>>> master
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: StringFilter
  name: StringNullableFilter
  posts: PostsRelationFilter
}

input SortPostsBy {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input SortTagsBy {
  id: OrderDirection
  name: OrderDirection
}

input UserWhereUniqueInput {
  id: ID
}

input SortUsersBy {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input PostWhereUniqueInput {
  id: ID
}

input TagWhereUniqueInput {
  id: ID
}

type Mutation {
  createUser(
    data: UserCreateInput! = { posts: { create: [], connect: [] } }
  ): User
  createUsers(data: [UserCreateInput!]!): [User!]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UsersUpdateInput!]!): [User!]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User!]
  createPost(
    data: PostCreateInput! = { tags: { create: [], connect: [] } }
  ): Post
  createPosts(data: [PostCreateInput!]!): [Post!]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostsUpdateInput!]!): [Post!]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post!]
  createTag(data: TagCreateInput! = { posts: { create: [], connect: [] } }): Tag
  createTags(data: [TagCreateInput!]!): [Tag!]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagsUpdateInput!]!): [Tag!]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag!]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput! = { create: [], connect: [] }
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]! = []
  connect: [PostWhereUniqueInput!]! = []
}

input PostCreateInput {
  title: String
  status: String
  content: JSON
  publishDate: String
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput! = { create: [], connect: [] }
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]! = []
  connect: [TagWhereUniqueInput!]! = []
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput! = { create: [], connect: [] }
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput! = {
    create: []
    connect: []
    disconnect: []
    disconnectAll: false
  }
}

<<<<<<< HEAD
input PostRelateToManyForUpdateInput {
  create: [PostCreateInput!]! = []
  connect: [PostWhereUniqueInput!]! = []
  disconnect: [PostWhereUniqueInput!]! = []
  disconnectAll: Boolean! = false
}
=======
type Query {
  """
   Search for all User items which match the where clause.
  """
  allUsers(
    where: UserWhereInput
    search: String
    sortBy: [SortUsersBy!]
    orderBy: String
    first: Int
    skip: Int! = 0
  ): [User]
>>>>>>> master

input UsersUpdateInput {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

<<<<<<< HEAD
input PostUpdateInput {
  title: String
  status: String
  content: JSON
  publishDate: String
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput! = {
    create: []
    connect: []
    disconnect: []
    disconnectAll: false
  }
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}
=======
  """
   Perform a meta-query on all User items which match the where clause.
  """
  _allUsersMeta(
    where: UserWhereInput
    search: String
    sortBy: [SortUsersBy!]
    orderBy: String
    first: Int
    skip: Int! = 0
  ): _QueryMeta

  """
   Search for all Post items which match the where clause.
  """
  allPosts(
    where: PostWhereInput
    search: String
    sortBy: [SortPostsBy!]
    orderBy: String
    first: Int
    skip: Int! = 0
  ): [Post]
>>>>>>> master

input TagRelateToManyForUpdateInput {
  create: [TagCreateInput!]! = []
  connect: [TagWhereUniqueInput!]! = []
  disconnect: [TagWhereUniqueInput!]! = []
  disconnectAll: Boolean! = false
}

<<<<<<< HEAD
input PostsUpdateInput {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput! = {
    create: []
    connect: []
    disconnect: []
    disconnectAll: false
  }
}
=======
  """
   Perform a meta-query on all Post items which match the where clause.
  """
  _allPostsMeta(
    where: PostWhereInput
    search: String
    sortBy: [SortPostsBy!]
    orderBy: String
    first: Int
    skip: Int! = 0
  ): _QueryMeta

  """
   Search for all Tag items which match the where clause.
  """
  allTags(
    where: TagWhereInput
    search: String
    sortBy: [SortTagsBy!]
    orderBy: String
    first: Int
    skip: Int! = 0
  ): [Tag]
>>>>>>> master

input TagsUpdateInput {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

type Query {
  User(where: UserWhereUniqueInput!): User
  allUsers(
    where: UserWhereInput! = {}
    orderBy: [SortUsersBy!]! = []
    first: Int
    skip: Int! = 0
<<<<<<< HEAD
  ): [User!]
  allUsersCount(where: UserWhereInput! = {}): Int
  Post(where: PostWhereUniqueInput!): Post
  allPosts(
    where: PostWhereInput! = {}
    orderBy: [SortPostsBy!]! = []
    first: Int
    skip: Int! = 0
  ): [Post!]
  allPostsCount(where: PostWhereInput! = {}): Int
  Tag(where: TagWhereUniqueInput!): Tag
  allTags(
    where: TagWhereInput! = {}
    orderBy: [SortTagsBy!]! = []
    first: Int
    skip: Int! = 0
  ): [Tag!]
  allTagsCount(where: TagWhereInput! = {}): Int
=======
  ): _QueryMeta
  authenticatedItem: AuthenticatedItem
>>>>>>> master
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}
